# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10_7UggPI_YASj4CZVv85NlT4i991mFfP
"""

!pip install SpeechRecognition pydub
!apt install ffmpeg

from google.colab import files
uploaded = files.upload()

# Confirm uploaded file
import os
audio_file = next(iter(uploaded))
print(f"Audio file uploaded: {audio_file}")

import speech_recognition as sr
from pydub import AudioSegment

# Convert MP3 or OGG to WAV if necessary
if audio_file.endswith((".mp3", ".ogg")):  # Added ".ogg" to the supported formats
    sound = AudioSegment.from_file(audio_file) # Use from_file to handle both mp3 and ogg
    audio_file = audio_file.replace(".mp3", ".wav").replace(".ogg", ".wav") # Handle both mp3 and ogg replacements
    sound.export(audio_file, format="wav")
elif not audio_file.endswith((".wav", ".aiff", ".aifc", ".flac")):
    # Handle unsupported formats explicitly
    raise ValueError(f"Unsupported audio format: {audio_file}. Please provide a WAV, AIFF/AIFF-C, or FLAC file.")


# Load recognizer and audio
recognizer = sr.Recognizer()
with sr.AudioFile(audio_file) as source:
    audio_data = recognizer.record(source)

# Recognize speech
try:
    command = recognizer.recognize_google(audio_data).lower()
    print(f"\nüéôÔ∏è Recognized command: {command}")
except sr.UnknownValueError:
    print("‚ùå Could not understand the audio.")
except sr.RequestError as e:
    print(f"API error: {e}")

# Simulated smart devices
smart_home = {
    "lights": False,
    "fan": False,
    "ac": False
}

# Parse command and update device state
if "light" in command:
    if "on" in command:
        smart_home["lights"] = True
        print("üí° Lights turned ON")
    elif "off" in command:
        smart_home["lights"] = False
        print("üí° Lights turned OFF")

if "fan" in command:
    if "on" in command:
        smart_home["fan"] = True
        print("üåÄ Fan turned ON")
    elif "off" in command:
        smart_home["fan"] = False
        print("üåÄ Fan turned OFF")

if "ac" in command:
    if "on" in command:
        smart_home["ac"] = True
        print("‚ùÑÔ∏è AC turned ON")
    elif "off" in command:
        smart_home["ac"] = False
        print("‚ùÑÔ∏è AC turned OFF")

print("\nüè† Current Smart Home Status:")
for device, state in smart_home.items():
    print(f"{device.capitalize()}: {'ON' if state else 'OFF'}")